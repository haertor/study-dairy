《python编程从入门到实践》
第二章
变量命名：只能包含字母、数字和下划线，不能以数字打头；不能包含空格，但可使用下划线来分割其中单词；不能将关键字和函数名作为变量名；变量名应既简短有具有描述性；慎用小写字母I和大写字母O
字符串：用引号括起的都是字符串，其中的引号可以是单引号，也可以是双引号。用函数str()将非字符串值表示为字符串
修改字符串的大小写：title()首字母大写，upper()全部大写，lower()全部小写
拼接字符串用：+
添加制表符\t,换行\n
删除：.rstrip()删除右空白，.lstrip()删除左空白，.strip()两边空白都删除
数字：整数，+ - * / **(乘方） 用括号来设置优先级；浮点数，带小数点的数字
编译：#

第三章 列表
列表：由一系列按特定顺序排列的元素组成，用方括号([])来表示列表，并用逗号来分隔其中的元素
访问列表元素：只需要将该元素的位置或索引告诉python即可，索引从0开始（正向）从-1开始（负向）
使用列表中的各个值：可像使用其他变量一样使用列表中的各个值
修改列表元素：可指定列表名和要修改的元素索引，再指定该元素的新值
在列表中添加元素：append(元素)将元素添加到末尾；insert(位置，元素)将元素添加到指定位置
从列表中删除元素：del 列表名[位置]删除列表中指定位置的元素；remove(元素)删去列表中的元素值；pop()删除末尾元素，pop(位置)可以弹出元素->判断标准：如果从列表中删除一个元素并且不再以任何方式使用它，就用del语句；如果要在删除后还能使用它就用pop()
使用方法sort()对列表进行永久排序：列表名.sort()按字母顺序排序；sort(reverse=True)按字母倒序排序
使用函数sorted()对列表进行临时排序：sorted(列表名)可以保留列表元素原来的排列顺序，同时以特定的顺序呈现它们，相反顺序排列也可以用reverse=True
倒着打印列表：列表名.reverse()，永久性修改列表排列顺序，但可以随时恢复到原来的排列顺序，只需要再次对列表使用该函数
确定列表长度：len(列表名)可以快速获悉列表长度，了解列表还有多少元素

第四章 操作列表
遍历整个列表：需要对列表中的每个元素都执行相同的操作时，可使用for循环。遍历for循环时，对于用于存储列表中每个值的临时变量，可指定任何名称。
在for循环中执行更多的操作：在for循环中，可对每个元素执行任何操作；在for循环中，想包含多少行代码都可以
在for循环结束后执行一些操作：没有缩进代码都执行一次，而不会重复执行
格式： for i in 列表名:....
创建数字列表：使用函数range(开始，结束，步长),生成数字，包前不包后。如果不符合预期可以尝试+—1
list(range())：把range()的结果直接变为列表
** 表示乘方运算
对数字列表执行简单的统计计算：min(列表名) 小；max(列表名) 大； sum(列表名) 和
列表解析：首先指定一个描述性的列表名；然后指定一个左方括号，并定义一个表达式，用于生成要存储到列表中的值；接下来，编写一个for循环，用于给表达式提供值，再加上右方括号
切片：创建切片，可指定要使用的第一个元素的索引和最后一个元素的索引+1  格式：[开头:结束]  如果没有指定第一个索引，python将自动从列表开头开始
遍历切片：可用for循环遍历切片
复制列表：新列表名=旧列表名[:]
元组（不可修改）：使用圆括号来定义()
遍历元组中的所有值用for
修改元组变量：重新定义或者赋值

第五章 if语句
条件测试：
每条if语句的核心都是一个值为True或False的表达式
检查是否相等：== （不考虑大小写）
检查是否不相等： != 
条件语句中可包含各种数字比较：< <= > >=
检查多个条件：使用and检查多个条件同时成立通过；使用or检查多个条件一个成立就通过
检查特定值是否包含在列表中：用关键字 in
检查特定值是否不包含在列表中：用关键字 not in
布尔表达式：条件测试的别名，结果为True或者False。通常用于记录条件，如游戏是否正在运行，或者用户是否可以编辑网站的特定内容
if语句：
简单的if语句：在if语句中，缩进的作业与for循环中相同
if-else语句：在条件测试通过的情况下执行一个操作，没有通过的情况下执行另一个操作。else语句能让你在指定条件测试未通过的时候执行其他操作。
if-elif-else结构：需要检查超过两个的情形，用此结构
使用多个elif代码块：可根据需要使用任意数量的elif代码块
else代码块可以省略
测试多个条件：if-elif-else结构功能强大，但仅适用于只有一个条件满足的情况，遇到通过了的测试后，python就跳过余下的测试。这种情况下，应使用一系列不包含elif和else代码块的简单if句。
使用if语句处理列表：可在for循环中插入if语句
确定列表不是空的：可以用if语句检查列表是否为空。在if语句中将列表名用在条件表达式中时，python将在列表至少包含一个元素时返回Ture，并在列表为空时返回False。

第六章 字典
字典的形式：{键:值}
使用字典：
在python中，字典是一系列键-值对，与键相关的值可以是数字、字符串、列表乃至字典。键-值对是两个相关联的值，指定键时，python将返回与之相关的值。键和值之间用冒号分隔，而键-值对之间用逗号分隔。在字典中想储存多少个键值对都可以。
访问字典中的值：要获取与键相关联的值，可依次指定字典名和放在方括号内的键。字典中可包含任意的键-值对。访问键值对，储存到变量中，在用str输出
添加键值对：要添加键值对，可依次指定字典名、用方括号括起的键和相关联的值：字典名[键]=值
先创建一个空字典：在空字典中添加键值对是为了方面，而有时候必须这样做。为此可以先使用一对空的花括号定义字典，再分行添加各个键值对。使用空字典来存储用户提供的数据或在编写能自动生成大量键值对的代码时，通常都需要先定义一个空字典。
修改字典中的值：可依次指定字典名、用方括号括起的键以及与该键相关联的新值。
删除键值对：可使用del语句将相应的键值对彻底删除。使用del语句时，必须指定字典名和要删除的键。
由类似对象组成的字典：字典储存的是一个对象的多种信息，但也可以使用字典来存储众多对象的同一种信息。
遍历字典：
遍历所有的键值对：for key,value in 字典名.items():   for语句的第二部分包含字典名和方法items()，它返回一个键-值对列表。
遍历字典中的所有键：在不需要使用字典的值时，方法keys()很有用 for key in 字典名.keys():  遍历字典时，会默认遍历所有的键。在这种循环中，可使用当前键来访问与之关联的值。方法keys()并非只能用于遍历，实际上，它返回一个列表，其中包含字典中的所有键
按顺序遍历字典众的所有键：用函数sorted()来获得按特定顺序排列的键列表副本
遍历字典众的所有值：可以使用方法values()，它返回一个值列表，而不包含任何键。为了剔除重复项，可使用集合set()，集合类似于列表，但每个元素都必须是独一无二的
嵌套：
有时候，需要将一系列字典存储在列表中，或将列表作为值存储在字典中，这称为嵌套
字典列表：把创建的字典放到一个列表当值
在字典中存储列表：当需要在字典中将一个键关联到多个值时，都可以在字典中嵌套一个列表。
在字典中嵌套字典：表示每位用户的字典的结构都相同，这使嵌套的字典处理起来更容易。

第七章 用户输入和while循环
7.1函数input()的工作原理：
函数input()让程序暂停运行，等待用户输入一些文本。获取用户输入后，python将其存储在一个变量中，以方便使用。
函数input()接受一个参数：即要向用户显示的提示或说明，让用户知道该如何做。
7.1.1编写清晰的程序：
每当使用函数input()时，都应指定清晰而易于明白的提示，准确地指出你希望用户提供什么样的信息——任何指出用户该输入何种信息的提示都行
通过在提示末尾包含一个空格，可将提示与用户输入分开，让用户清楚地知道其输入始于何处。
有时候，提示可能超过一行。在这种情况下，可将提示存储在一个变量中，再将该变量传递给函数input()
7.1.2使用int()来获取数值输入：
使用函数input()时，python将用户输入解读为字符串。
用户输入的是数字，但我们请求python提供变量的值时，它返回的是字符串，可使用函数int()，让python将输入视为数值
7.1.3求模运算符：
求模运算符(%)，将两个数相除并返回余数
7.2while循环简介：
for循环用于针对集合中的每个元素的一个代码，而while循环不断地运行，直到指定的条件不满足为止
7.2.1使用while循环
7.2.2让用户选择何时退出：
可使用while循环让程序在用户愿意时不断地运行。我们在其中定义一个退出值，只要用户输入的不是这个值，程序就接着运行。
7.2.3使用标志：
在要求很多条件都满足才继续运行的程序中，可定义一个变量，用于判断整个程序是否处于活动状态。这个变量被称为标志，充当了程序的交通信号灯。让程序在标志为True时继续运行，并在任何事件导致标志的值为False时让程序停止运行。
7.2.4使用break退出循环：
要立即退出循环，不再运行循环中余下的代码，也不管条件测试的结果如何，可使用break从句。
在任何python循环中都可以使用break语句。
7.2.5在循环中使用continue：
要返回到循环开头，并根据条件测试结果决定是否继续执行循环，可使用continue语句，它不像break语句那样不再执行余下的代码并退出整个循环
7.2.6避免无限循环：
如果程序陷入无限循环，可按Ctrl+C，也可关闭显示程序输出的终端窗口。
7.3使用while循环来处理列表和字典：
要记录大量的用户和信息，需要在while循环中使用列表和字典
for循环是一种遍历列表的有效方式，但在for循环中不应修改列表，否则将导致python难以跟踪其中的元素。要在遍历列表的同时对其进行修改，可使用while循环。
7.3.1在列表之间移动元素：
方法pop()以每次一个的方式从列表末尾删除元素
append()列表末尾增加元素
7.3.2删除包含特定值的所有列表元素：
使用方法remove()来删除列表中的特定值
7.3.3使用用户输入来扩充字典：
可使用while循环来提示用户输入任意数量的信息

第八章 函数
8.1定义函数：
使用关键字def来告诉python要定义一个函数。这是函数定义，向python指出了函数名，还可能在括号内指出函数为完成其任务需要什么样的信息，括号不可少，定义以冒号结尾
格式：def 函数名():
紧跟在后面的所有缩进构成了函数体
"""   """ 文档字符串的注释
8.1.1向函数传递信息：
可在函数定义的括号内添加变量，可以让函数接受给变量指定的任何值
def 函数名(变量名):   这个变量为形参   调用函数的时候就为实参
8.1.2实参和形参
在函数定义中，变量的一个形参——函数完成其工作所需的一项信息
在调用函数的时候变量的值是一个实参——实参是调用函数时传递给函数的信息
8.2传递实参：
函数定义中可能包含多个形参，因此函数调用中也可能包含多个实参
8.2.1位置实参：
调用函数时，python必须将函数中的每个实参都关联到函数定义的一个形参。为此，最简单的方式是基于实参的顺序。这种关联方式被称为位置实参。
调用函数多次：不断的定义形参即可
位置实参的顺序很重要，要确认函数调用中实参的顺序与函数定义中形参的顺序一致
8.2.2关键字实参：
关键字实参是传递给函数的名称-值对。关键字让你无需考虑函数调用中的实参顺序，还清楚地指出了函数调用中各个值的用途
使用关键字时，务必准确地指定函数定义中的形参名
8.2.3默认值：
编写函数时，可给每个形参指定默认值。
在调用函数中给形参提供了实参时，python将使用指定的实参值；否则，将使用形参的默认值。
8.2.4等效的函数调用：
鉴于可混合使用位置实参、关键字实参和默认值，通常有多种等效的函数调用方式。
8.3返回值：
可以处理一些数据，并返回一个或一组值。函数返回的值被称为返回值。
可使用return语句返回到调用函数的代码行
8.3.1返回简单值：
格式：return 变量名
调用返回值的函数时，需要提供一个变量，用于存储返回的值。
8.3.2让实参变成可选的：
有时候，需要让实参变成可选的，这样使用函数的人就只需要在必要时才提供额外的信息
为让某一个形参变成可选的，可以给形参指定一个默认值——空字符串
8.3.3返回字典：
函数可返回任何类型的值，包括列表和字典等复杂的数据结构
8.3.4结合使用函数和while循环
8.4传递列表：
将函数定义成接受实参的列表，并将其存储在形参中
8.4.1在函数中修改列表：
将列表传递给函数后，函数就可以对其进行修改。
每个函数都应只负责一项具体的工作。
8.4.2禁止函数修改列表：
为解决这个问题，可向函数传递列表的副本而不是原件；这样函数所做的任何修改都只影响副本，而丝毫不影响原件。
要将列表的副本传递给函数，可以用切片表示法[:]创建列表的副本
8.5传递任意数量的实参：
形参名*+名字中的星号让python创建一个名为。。的空元组，并将收到的所有值都封装到这个元组中。
它以类似的方式处理不同的调用，注意，python将实参封装到一个元组中，即便函数只收到一个值也是如此。
8.5.1结合使用位置实参和任意数量实参：
在函数定义中将接纳任意数量实参的形参放在最后。
python将先匹配位置实参和关键字实参，再将余下的实参都收集到最后一个形参中。
8.5.2使用任意数量的关键字实参：
**+形参：创建空字典
8.6将函数存储在模块中：
import()语句允许在当前运行的程序文件中使用代码模块。
8.6.1导入整个代码模块：
import 模块名
要调用被导入的模块中的函数，可指定导入的模块名称和函数名，并用句点分隔它们。
只需编写一条import语句并在其中指定模块名，就可在程序中使用该模块中的所有函数
使用格式：模块名.函数名()
8.6.2导入特定的函数：
通过用逗号分隔函数名，可根据需要从模块中导入任意数量的函数
格式：from 模块名 import 函数1，函数2，函数3
若使用这种语法，调用函数时就无需使用句点
8.6.3使用as给函数指定别名：
如果要导入的函数的名称可能与程序中现有的名称冲突，或者函数的名称太长，可指定简短而独一无二的别名——函数的另一个名称，类似于外号
关键字as将函数重命名为你提供别名
格式：from 模块名 import 函数名 as 别名
8.6.4使用as给模块指定别名：
格式:from 模块名 as 别名
8.6.5导入模块中的所有函数：
使用星号(*)运算符可让python导入模块中的所有函数
格式： from 模块名 import *
由于导入了每个函数，可通过名称来调用函数，而无需使用句点表示法
最佳的做法是，要么只导入你需要使用的函数，要么导入整个模块并使用句点表示法

第九章 类
9.1创建和使用类
9.1.1创建Dog类
格式：class Dog():
根据约定，在python中，首字母大写的名称指的是类。
类中的函数称为方法
方法_init_(self，形参，形参...)
  这个方法名称中，开头和末尾各有两个下划线，这是一种约定，旨在避免python默认方法和普通方法发生名称冲突
  在这个方法定义中，形参self不可少，还必须位于其他形参的前面
  我们通过实参向类传递内容时，self会自动传递，因此我们不需要传递它
  以self为前缀的变量都可供类中的所有方法使用，我们还可以通过类的任何实例来访问这些变量。
  eg，self.name = name获取存储在形参name中的值，并将其存储到变量name中，然后该变量被关联到当前创建的实例
9.1.2根据类创建实例
我们通常可以认为首字母大写的名称指的是类，而小写的名称指的是根据类创建的实例
1.访问属性
  要访问实例的属性，可使用句点表示法
2.调用方法
  可以使用句点表示法来调用类中定义的任何方法
3.创建多个实例
  可按需求根据类创建任意数量的实例
9.2使用类和实例
9.2.2给属性指定默认值
在有些情况下，如设置默认值时，在方法_init_()内指定这种初始值是可行的；
如果你对某个属性这样做了，就无需包含为它提供初始值的形参
9.2.3修改属性的值
1.直接修改属性的值
  要修改属性的值，最简单的方式是通过实例直接访问它
2.通过方法修改属性值
  通过在方法里添加新的内容，直接在内部进行更新
3.通过方法对属性的值进行递增
  有时候需要将属性值递增特定的量，而不是将其设置为全新的值
9.3继承
一个类继承另一个类时，它将自动获得另一个类的所有属性和方法；
原有的类称为父类，而新类称为子类；
子类继承了其父类的所有属性和方法，同时还可以定义自己的属性和方法
9.3.1子类的方法_init_()
创建子类的实例是时，python首先需要完成的任务是给父类的所有属性赋值。
为此，子类的方法_init_()需要父类施以援手。
格式： class 子类名(父类名):
          def _init_(self,A,B,C):
            super()._init_(A,B,C)
创建子类时，父类必须包含在当前文件中，且位于子类前面。
super()是特殊函数，帮助python将父类和子类关联起来。
父类也称为超类（superclass)，名称super因此而得名。
9.3.3给子类定义属性和方法：
让一个类继承另一个类后，可添加区分子类和父类所需的新属性和方法。
对于子类的特殊化程度没有任何限制。
9.3.4重写父类的方法：
对于父类的方法，只要它不符合子类模拟的实物的行为，都可对其进行重写。
可在子类中定义一个这样的方法，即它与要重写的父类方法同名，这样python将不会考虑这个父类方法，而只关注你在子类中定义的相应方法。
9.3.5将实例用作属性：
使用代码模拟实物时，你可能会发现自己给类添加的细节越来越多：属性和方法清单以及文件都越来越长。
这种情况下，可以将类的一部分作为一个独立的类提取出来。
将大类拆分成多个协同工作的小类。
9.4导入类
python允许你将类存储在模块中，然后再主程序中导入所需要的模块
9.4.1导入单个类：
import语句让python打开模块，并导入其中一个类
9.4.2在模块中存储多个类：
虽然同一个模块中的类之间都应存在某种关联性，但可根据需要在一个模块中存储任意数量的类。
9.4.3从一个模块中导入多个类：
可根据需要在程序文件中导入任意数量的类。
从一个模块中导入多个类时，用逗号分隔了各个类。导入必要的类后，就可根据需要创建每个类的任意数量的实例。
9.4.4导入整个模块：
import 模块名
导入整个模块
9.4.5导入模块中的所有类：
要导入模块中的每个类，可使用下面的语法
格式：from 模块名 import*
不推荐这种导入方式。这种导入方式没有明确地指出使用了模块中的哪些类；还可能引发名称方面的困惑。
需要从一个模块中导入很多类时，最好导入整个模块，并使用 模块名.类名 语法来访问类
9.6类编码风格
类名应采用驼峰命名法，即将类名中的每个单词的首字母都大写，而不是用下划线。
实例名和模块名都应该采用小写格式，并在单词之间加上下划线。
可使用空行来组织代码，但不要滥用。
先编写导入标准库模块的import语句，再添加一个空行，然后编写导入你自己编写的模块的import语句。
第十章 文件和异常
10.1从文件中读取数据
10.1.1读取整个文件：
函数open()接受一个参数：要打开的文件的名称。
python在当前执行的文件所在的目录中查找指定的文件。
函数open()返回一个表示文件的对象，python将这个对象存储在我们将在后面使用的变量中。
关键字with在不在需要访问文件后将其关闭，
格式： with open('文件名') as 文件对象:
有了表示文件的文件对象后，我们使用方法read()读取这个文件的全部内容，将其作为一个长字符串保存在一个变量中
read()到达文件末尾时返回一个空字符串，而将这个空字符串显示出来时就是一个空行。要删除末尾的空行，可在print语句中使用rstrip()
10.1.2文件路径：
在python默认的文件夹中，可使用相对路径来打开文件夹中的文件（只用标注部分）
若没有在默认的文件夹中，可使用绝对路径来打开文件夹中的文件（全部标注出来）
10.1.3逐行读取：
通过for循环遍历文件中的每一行进行读取
10.1.4创建一个包含文件各行内容的列表：
方法readline()从文件中读取每一行，并将其存储在一个列表中；
接下来，该列表被存储到变量中；
我们可以使用这个变量
格式：变量 = 文件对象名.readlines()
10.1.5使用文件的内容
10.1.6包含一百万位的大型文件
对于你可处理的数据量，python没有任何限制；只要系统的内存足够多，想处理多少数据都可以
10.2写入文件
保存数据最简单的方式之一就是将其写入到文件中；
通过将输出写入文件，即便关闭包含程序输出的终端窗口，这些输出也依然存在。
10.2.1写入空文件：
要将文本写入文件，在调用open()时需要提供另一个实参，告诉python你要写入打开的文件
格式： with open(filename,'w') as file_object:
          file_object.wirte('')
打开文件时，可指定读取模式('r'),写入模式('w'),附加模式('a'),或让你能够读取和写入文件的模式('r+')
10.2.2写入多行：
函数wirte()不会在你写入的文本末尾添加换行符，因此如果你写入多行时没有指定换行符，文件看起来可能不是你希望的那样
要让每个字符串都单独占一行，需要在write()语句中包含换行符
10.2.3附加到文件：
如果要给文件添加内容，而不是覆盖原有内容，可以附加模式打开文件
以附加模式打开文件时，python不会在返回文件对象前清空文件，而你写入到文件的行都将添加到文件末尾。
如果指定的文件不存在，python将为你创建一个空文件。
10.3异常
每当发生让python不知所措的错误时，它都会创建一个异常对象。
如果未对异常对象进行处理，程序将会停止，并显示一个traceback，其中包含有关异常的报告。
异常是使用try-except代码块处理的。
使用了try-except代码块时，即便出现异常，程序也将继续运行：显示你编写好的友好错误信息，而不是令用户迷惑的traceback
10.3.1处理ZeroDivisionError异常：
10.3.2使用try-except代码块：
格式：try：
        内容
       except 错误类型：
        print('输出内容')
10.3.3使用异常避免崩溃：
发生错误时，如果程序还有工作没有完成，妥善地处理错误就尤其重要
这种情况经常会出现在要求用户提供输入的程序中
10.3.4else代码块：
通过将可能引发错误的代码放在try-except代码块中，可提高这个程序抵御错误的能力。
except代码块告诉python，出现异常时该怎么办
格式：try:
        内容
      except 异常:
        内容
      else:
        内容
 python尝试进行执行try代码块中的代码；只有可能引发异常的代码才需要放在try语句中
 except代码块告诉python，如果它尝试运行try代码块中的代码时引发了指定的异常，该怎么办。
 10.3.5处理FileNotFoundError异常
 10.3.6分析文本：
 可以分析包含整本书的文本文件
 10.3.7使用多个文件
 10.3.8失败时一声不吭：
 并非每次捕捉到异常时都需要告诉用户，有时候你希望程序在发生异常时一声不吭，就像什么都没有发生过一样继续运行。
 except的内容为pass
 添加一个pass语句
 pass语句充当了占位符，它提醒你在程序的某个地方什么都没做，并且以后也许要在这里做些什么，
 10.4存储数据
 一种简单的方式是使用模块json来存储数据
 10.4.1使用json.dump()和json.load()
 编写一个存储一组数字的简短程序——json.dump()
 再编写一个将这些数字读取到内存中的程序——json.load()
 json.dump()接受两个实参：要存储的数据以及可用于存储数据的文件对象；
 格式：import json
       内容
       with open(filename,'w') as f_obj:
        json.dump(内容,f_obj)
        number = json.laod(f_obj)
 10.4.2保存和读取用户生成的数据：
 对于用户生成的数据，使用json保持
 如果不以某种方式进行存储，等程序停止运行时用户的信息将丢失
 10.4.3重构：
 重构让代码更清晰、更易于理解、更容易扩展
 要重构代码，可将其大部分逻辑放到一个或多个文件中。
 
 













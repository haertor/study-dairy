《python编程从入门到实践》
第二章
变量命名：只能包含字母、数字和下划线，不能以数字打头；不能包含空格，但可使用下划线来分割其中单词；不能将关键字和函数名作为变量名；变量名应既简短有具有描述性；慎用小写字母I和大写字母O
字符串：用引号括起的都是字符串，其中的引号可以是单引号，也可以是双引号。用函数str()将非字符串值表示为字符串
修改字符串的大小写：title()首字母大写，upper()全部大写，lower()全部小写
拼接字符串用：+
添加制表符\t,换行\n
删除：.rstrip()删除右空白，.lstrip()删除左空白，.strip()两边空白都删除
数字：整数，+ - * / **(乘方） 用括号来设置优先级；浮点数，带小数点的数字
编译：#

第三章 列表
列表：由一系列按特定顺序排列的元素组成，用方括号([])来表示列表，并用逗号来分隔其中的元素
访问列表元素：只需要将该元素的位置或索引告诉python即可，索引从0开始（正向）从-1开始（负向）
使用列表中的各个值：可像使用其他变量一样使用列表中的各个值
修改列表元素：可指定列表名和要修改的元素索引，再指定该元素的新值
在列表中添加元素：append(元素)将元素添加到末尾；insert(位置，元素)将元素添加到指定位置
从列表中删除元素：del 列表名[位置]删除列表中指定位置的元素；remove(元素)删去列表中的元素值；pop()删除末尾元素，pop(位置)可以弹出元素->判断标准：如果从列表中删除一个元素并且不再以任何方式使用它，就用del语句；如果要在删除后还能使用它就用pop()
使用方法sort()对列表进行永久排序：列表名.sort()按字母顺序排序；sort(reverse=True)按字母倒序排序
使用函数sorted()对列表进行临时排序：sorted(列表名)可以保留列表元素原来的排列顺序，同时以特定的顺序呈现它们，相反顺序排列也可以用reverse=True
倒着打印列表：列表名.reverse()，永久性修改列表排列顺序，但可以随时恢复到原来的排列顺序，只需要再次对列表使用该函数
确定列表长度：len(列表名)可以快速获悉列表长度，了解列表还有多少元素

第四章 操作列表
遍历整个列表：需要对列表中的每个元素都执行相同的操作时，可使用for循环。遍历for循环时，对于用于存储列表中每个值的临时变量，可指定任何名称。
在for循环中执行更多的操作：在for循环中，可对每个元素执行任何操作；在for循环中，想包含多少行代码都可以
在for循环结束后执行一些操作：没有缩进代码都执行一次，而不会重复执行
格式： for i in 列表名:....
创建数字列表：使用函数range(开始，结束，步长),生成数字，包前不包后。如果不符合预期可以尝试+—1
list(range())：把range()的结果直接变为列表
** 表示乘方运算
对数字列表执行简单的统计计算：min(列表名) 小；max(列表名) 大； sum(列表名) 和
列表解析：首先指定一个描述性的列表名；然后指定一个左方括号，并定义一个表达式，用于生成要存储到列表中的值；接下来，编写一个for循环，用于给表达式提供值，再加上右方括号
切片：创建切片，可指定要使用的第一个元素的索引和最后一个元素的索引+1  格式：[开头:结束]  如果没有指定第一个索引，python将自动从列表开头开始
遍历切片：可用for循环遍历切片
复制列表：新列表名=旧列表名[:]
元组（不可修改）：使用圆括号来定义()
遍历元组中的所有值用for
修改元组变量：重新定义或者赋值

第五章 if语句
条件测试：
每条if语句的核心都是一个值为True或False的表达式
检查是否相等：== （不考虑大小写）
检查是否不相等： != 
条件语句中可包含各种数字比较：< <= > >=
检查多个条件：使用and检查多个条件同时成立通过；使用or检查多个条件一个成立就通过
检查特定值是否包含在列表中：用关键字 in
检查特定值是否不包含在列表中：用关键字 not in
布尔表达式：条件测试的别名，结果为True或者False。通常用于记录条件，如游戏是否正在运行，或者用户是否可以编辑网站的特定内容
if语句：
简单的if语句：在if语句中，缩进的作业与for循环中相同
if-else语句：在条件测试通过的情况下执行一个操作，没有通过的情况下执行另一个操作。else语句能让你在指定条件测试未通过的时候执行其他操作。
if-elif-else结构：需要检查超过两个的情形，用此结构
使用多个elif代码块：可根据需要使用任意数量的elif代码块
else代码块可以省略
测试多个条件：if-elif-else结构功能强大，但仅适用于只有一个条件满足的情况，遇到通过了的测试后，python就跳过余下的测试。这种情况下，应使用一系列不包含elif和else代码块的简单if句。
使用if语句处理列表：可在for循环中插入if语句
确定列表不是空的：可以用if语句检查列表是否为空。在if语句中将列表名用在条件表达式中时，python将在列表至少包含一个元素时返回Ture，并在列表为空时返回False。

第六章 字典
字典的形式：{键:值}
使用字典：
在python中，字典是一系列键-值对，与键相关的值可以是数字、字符串、列表乃至字典。键-值对是两个相关联的值，指定键时，python将返回与之相关的值。键和值之间用冒号分隔，而键-值对之间用逗号分隔。在字典中想储存多少个键值对都可以。
访问字典中的值：要获取与键相关联的值，可依次指定字典名和放在方括号内的键。字典中可包含任意的键-值对。访问键值对，储存到变量中，在用str输出
添加键值对：要添加键值对，可依次指定字典名、用方括号括起的键和相关联的值：字典名[键]=值
先创建一个空字典：在空字典中添加键值对是为了方面，而有时候必须这样做。为此可以先使用一对空的花括号定义字典，再分行添加各个键值对。使用空字典来存储用户提供的数据或在编写能自动生成大量键值对的代码时，通常都需要先定义一个空字典。
修改字典中的值：可依次指定字典名、用方括号括起的键以及与该键相关联的新值。
删除键值对：可使用del语句将相应的键值对彻底删除。使用del语句时，必须指定字典名和要删除的键。
由类似对象组成的字典：字典储存的是一个对象的多种信息，但也可以使用字典来存储众多对象的同一种信息。
遍历字典：
遍历所有的键值对：for key,value in 字典名.items():   for语句的第二部分包含字典名和方法items()，它返回一个键-值对列表。
遍历字典中的所有键：在不需要使用字典的值时，方法keys()很有用 for key in 字典名.keys():  遍历字典时，会默认遍历所有的键。在这种循环中，可使用当前键来访问与之关联的值。方法keys()并非只能用于遍历，实际上，它返回一个列表，其中包含字典中的所有键
按顺序遍历字典众的所有键：用函数sorted()来获得按特定顺序排列的键列表副本
遍历字典众的所有值：可以使用方法values()，它返回一个值列表，而不包含任何键。为了剔除重复项，可使用集合set()，集合类似于列表，但每个元素都必须是独一无二的
嵌套：
有时候，需要将一系列字典存储在列表中，或将列表作为值存储在字典中，这称为嵌套
字典列表：把创建的字典放到一个列表当值
在字典中存储列表：当需要在字典中将一个键关联到多个值时，都可以在字典中嵌套一个列表。
在字典中嵌套字典：表示每位用户的字典的结构都相同，这使嵌套的字典处理起来更容易。

第七章 用户输入和while循环
7.1函数input()的工作原理：
函数input()让程序暂停运行，等待用户输入一些文本。获取用户输入后，python将其存储在一个变量中，以方便使用。
函数input()接受一个参数：即要向用户显示的提示或说明，让用户知道该如何做。
7.1.1编写清晰的程序：
每当使用函数input()时，都应指定清晰而易于明白的提示，准确地指出你希望用户提供什么样的信息——任何指出用户该输入何种信息的提示都行
通过在提示末尾包含一个空格，可将提示与用户输入分开，让用户清楚地知道其输入始于何处。
有时候，提示可能超过一行。在这种情况下，可将提示存储在一个变量中，再将该变量传递给函数input()
7.1.2使用int()来获取数值输入：
使用函数input()时，python将用户输入解读为字符串。
用户输入的是数字，但我们请求python提供变量的值时，它返回的是字符串，可使用函数int()，让python将输入视为数值
7.1.3求模运算符：
求模运算符(%)，将两个数相除并返回余数
7.2while循环简介：
for循环用于针对集合中的每个元素的一个代码，而while循环不断地运行，直到指定的条件不满足为止
7.2.1使用while循环
7.2.2让用户选择何时退出：
可使用while循环让程序在用户愿意时不断地运行。我们在其中定义一个退出值，只要用户输入的不是这个值，程序就接着运行。
7.2.3使用标志：
在要求很多条件都满足才继续运行的程序中，可定义一个变量，用于判断整个程序是否处于活动状态。这个变量被称为标志，充当了程序的交通信号灯。让程序在标志为True时继续运行，并在任何事件导致标志的值为False时让程序停止运行。
7.2.4使用break退出循环：
要立即退出循环，不再运行循环中余下的代码，也不管条件测试的结果如何，可使用break从句。
在任何python循环中都可以使用break语句。
7.2.5在循环中使用continue：
要返回到循环开头，并根据条件测试结果决定是否继续执行循环，可使用continue语句，它不像break语句那样不再执行余下的代码并退出整个循环
7.2.6避免无限循环：
如果程序陷入无限循环，可按Ctrl+C，也可关闭显示程序输出的终端窗口。
7.3使用while循环来处理列表和字典：
要记录大量的用户和信息，需要在while循环中使用列表和字典
for循环是一种遍历列表的有效方式，但在for循环中不应修改列表，否则将导致python难以跟踪其中的元素。要在遍历列表的同时对其进行修改，可使用while循环。
7.3.1在列表之间移动元素：
方法pop()以每次一个的方式从列表末尾删除元素
append()列表末尾增加元素
7.3.2删除包含特定值的所有列表元素：
使用方法remove()来删除列表中的特定值
7.3.3使用用户输入来扩充字典：
可使用while循环来提示用户输入任意数量的信息

第八章 函数


















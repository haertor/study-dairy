1、绘制简单折线图
 -先导入模块pyplot，并给它指定别名plt
  import matplotlib.pyplot as plt
  squares = [1,4,9,16,25]  创建列表
  plt.plot(squares)  传递列表给plot
  plt.show()  打开matplotlib查看器，并显示绘制的图形
 -修改标签文字和线条粗细
  plt.title('名字',fontsize=粗细)
  plt.xlabel('名字',fontsize=粗细)
  plt.ylabel('名字',fontsize=粗细)
  plt.tick_params(axis='刻度标记',labelsize=粗细)
 -校正图形
  当你向plot()提供一系列数字时，它假设第一个数据点对应的x坐标值为0，但我们的第一个点对应的x值为1。
  为改变这种默认行为，我们可以给plot()同时提供输入值和输出值
  imput_values = [1,2,3,4,5]
  内容
  plt.plot(input_values,squares,linewidth=粗细)
2、使用scatter()绘制散点图并设置其样式
 -绘制单个点
  plt.scatter(横坐标,纵坐标,s = 大小)
  使用实参S设置了绘制图形时使用的点的尺寸
 -绘制一系列的点
  要绘制一系列的点，可想scatter()传递两个分别包含x值和y值的列表
  x_values = [1,2,3,4,5]
  y_values = [1,4,9,16,25]
  plt.scatter(x_values,y_values,s = 100)
  列表x_values包含要计算其平方值的数字，而列表y_values包含前述每个数字的平方值
 -自动计算数据
  手工计算列表要包含的值可能效率低下，需要绘制的点很多时尤其如此。
  可以不必手工计算包含点坐标的列表，而让python循环来替我们完成这种计算
  x_values = list(range(1,1001))
  y_values = [x**2 for x in x_values]
  plt.scatter(x_values,y_values, s= 40)
  plt.axis([0【X坐标的最小值】,1100【X坐标的最大值】,0【Y坐标的最小值】,1100000【Y坐标的最大值】])
  函数axis()要求提供四个值：x和y坐标轴的最小值和最大值
3、删除数据点的轮廓
 matplotlib允许你给散点图中的各个点制定颜色。
 默认颜色为蓝色点和黑色轮廓，在散点图包含的数据点不多时效果很好。
 但绘制很多点时，黑色轮廓可能会黏在一起。
 要删除数据点的轮廓，可在调用scatter()时传递实参edgecolor = 'none'
 edgecolor 轮廓 
4、自定义颜色
 要修改自定义颜色，可向scatter()传递参数c，并将其设置为要使用的颜色的名称
 scatter(x,y,c = 'red',edgecolor = 'none', s = 40)
 还可以使用RGB颜色模式自定义颜色。要指定自定义颜色，可传递参数c，并将其设置为一个元组，其中包含三个0~1之间的小数值，它们分别表示红色，绿色和蓝色分量，
 值越接近0.指定的颜色越深；值越接近1，指定的颜色越浅
5、使用颜色映射
 颜色映射（colormap）是一系列颜色，它们从起始颜色渐变到结束颜色。
 在可视化中，颜色映射用于突出数据规律
 模块pyplot内置了一组颜色映射。
 要使用这些颜色映射，你需要告诉pyplot该如何设置数据集中每个点的颜色
6、自动保存图表
 要让程序自动将图表保存到文件中，可将对plt,show()的调用替换为对plt.savefig()的调用
 plt.savefig('名称.png',bbox_inches = 'tight')
 第一个实参指定要以什么样的文件名保存图表，第二个实参指定将图表多余的空白区域裁剪掉
 如果要保留图表周围多余的空白区域，可省略这个实参


 
 
 
 
 
 
 
 
 
  
